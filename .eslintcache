[{"D:\\portfolio\\src\\index.tsx":"1","D:\\portfolio\\src\\header\\Header.tsx":"2","D:\\portfolio\\src\\contact\\Contact.tsx":"3","D:\\portfolio\\src\\main\\Main.tsx":"4","D:\\portfolio\\src\\nav\\Nav.tsx":"5","D:\\portfolio\\src\\common\\components\\title\\Title.tsx":"6","D:\\portfolio\\src\\App.tsx":"7","D:\\portfolio\\src\\reportWebVitals.ts":"8","D:\\portfolio\\src\\skills\\Skills.tsx":"9","D:\\portfolio\\src\\works\\Projects.tsx":"10","D:\\portfolio\\src\\footer\\Footer.tsx":"11","D:\\portfolio\\src\\skills\\skill\\Skill.tsx":"12","D:\\portfolio\\src\\works\\project\\Project.tsx":"13","D:\\portfolio\\src\\aboutMe\\AboutMe.tsx":"14"},{"size":500,"mtime":1616257611000,"results":"15","hashOfConfig":"16"},{"size":218,"mtime":1616257611000,"results":"17","hashOfConfig":"16"},{"size":2817,"mtime":1616546079919,"results":"18","hashOfConfig":"16"},{"size":1404,"mtime":1616881554682,"results":"19","hashOfConfig":"16"},{"size":1036,"mtime":1616444723693,"results":"20","hashOfConfig":"16"},{"size":248,"mtime":1616257611000,"results":"21","hashOfConfig":"16"},{"size":638,"mtime":1616709711332,"results":"22","hashOfConfig":"16"},{"size":425,"mtime":1616257611000,"results":"23","hashOfConfig":"16"},{"size":3556,"mtime":1616453713250,"results":"24","hashOfConfig":"16"},{"size":1707,"mtime":1616709013700,"results":"25","hashOfConfig":"16"},{"size":2044,"mtime":1616459214906,"results":"26","hashOfConfig":"16"},{"size":883,"mtime":1616452033386,"results":"27","hashOfConfig":"16"},{"size":678,"mtime":1616536498629,"results":"28","hashOfConfig":"16"},{"size":1058,"mtime":1616712654720,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1g2pf3u",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\portfolio\\src\\index.tsx",[],["62","63"],"D:\\portfolio\\src\\header\\Header.tsx",[],"D:\\portfolio\\src\\contact\\Contact.tsx",["64"],"import React, {useState} from 'react';\nimport s from './Contact.module.scss'\nimport c from './../common/styles/Container.module.css';\nimport {Title} from \"../common/components/title/Title\";\nimport {useFormik} from \"formik\";\nimport emailjs from 'emailjs-com'\n\ntype FormikErrorType = {\n    name?: string\n    email?: string\n}\n\nexport function ContactBlock() {\n\n    const [send, setSend] = useState(false)\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            message: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Email Required!';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,8}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.name) {\n                errors.name = \"Please,enter your name\"\n            } else if (values.name.length < 2) {\n                errors.name = \"Please, enter your full name\"\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n        }\n    })\n    //@ts-ignore\n    const sendEmail = (e) => {\n        setSend(true)\n        e.preventDefault()\n        emailjs.sendForm('service_sxulrj3', 'template_m1rzjzq', e.target, 'user_odufobvmBnlnSn58cvJrB')\n            .then((result) => {\n                console.log(result.text)\n            }, (error) => {\n                console.log(error.text)\n            })\n        e.target.reset()\n\n        const timeOutID = setTimeout(() => {\n            setSend(false)\n        }, 5000)\n        return () => {\n            clearTimeout(timeOutID)\n        }\n    }\n\n    return <div id=\"contacts\" className={s.contactBlock}>\n        <div className={`${c.container} ${s.contactContainer}`}>\n            <Title text={\"Contacts\"}/>\n            <form className={s.formBlock} onSubmit={sendEmail}>\n                <input id=\"name\" className={s.input} type={\"text\"}\n                       placeholder={\"Name\"} {...formik.getFieldProps('name')}/>\n                {formik.touched.name &&\n                formik.errors.name ? <div style={{color: \"red\"}}>{formik.errors.name}</div> : null}\n                <input id=\"email\" className={s.input} type={\"text\"}\n                       placeholder={\"Email\"} {...formik.getFieldProps('email')}/>\n                {formik.touched.email &&\n                formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                <input id=\"message\" className={s.input}\n                       placeholder={\"Напишите ваше сообщение\"} {...formik.getFieldProps('message')}/>\n                <button type={\"submit\"} className={s.button}>Submit</button>\n            </form>\n        </div>\n    </div>\n}\n","D:\\portfolio\\src\\main\\Main.tsx",["65"],"import React from 'react';\nimport s from './Main.module.scss';\nimport c from './../common/styles/Container.module.css';\nimport Photo from './../assets/images/photo.jpg'\nimport Particles from 'react-particles-js';\nimport Fade from 'react-awesome-reveal';\nimport ReactTypingEffect from 'react-typing-effect';\n\n\n\n\nlet ParticleParamsDots ={\n    particles: {\n        size: {\n            value: 2\n        },\n        line_linked: {\n            enable: false,\n        }\n    }\n}\n\nlet ParticleParamsLines ={\n    particles: {\n        size: {\n            value: 3\n        },\n        line_linked: {\n            enable: true,\n        }\n    }\n}\n\n\n\nexport function MainBlock() {\n\n    return (\n        <div id=\"main\" className={s.mainBlock}>\n            <Particles className={s.particles} params={ParticleParamsDots}/>\n            <Particles className={s.particles}  params={ParticleParamsLines}/>\n            <Fade  duration={1500} triggerOnce={true}>\n            <div className={c.container}>\n                <div className={s.text_photo}>\n                <div className={s.text}>\n\n                    <p><ReactTypingEffect text={[`Front-end developer`]} cursor=\"_\" eraseSpeed={0} typingDelay={1000}/></p>\n                    <h1>Kozlovski Vladislav</h1>\n                </div>\n                <img className={s.photo} src={Photo}/>\n                </div>\n            </div>\n            </Fade>\n        </div>\n    );\n}\n","D:\\portfolio\\src\\nav\\Nav.tsx",[],"D:\\portfolio\\src\\common\\components\\title\\Title.tsx",[],"D:\\portfolio\\src\\App.tsx",[],"D:\\portfolio\\src\\reportWebVitals.ts",[],"D:\\portfolio\\src\\skills\\Skills.tsx",[],"D:\\portfolio\\src\\works\\Projects.tsx",[],"D:\\portfolio\\src\\footer\\Footer.tsx",[],"D:\\portfolio\\src\\skills\\skill\\Skill.tsx",[],"D:\\portfolio\\src\\works\\project\\Project.tsx",["66"],"import React from 'react';\nimport p from './Project.module.scss';\n\ntype projectPropsType = {\n    title: string\n    discription: string\n    style:{ backgroundImage: string; }\n    href:string\n}\n\nexport function Project(props: projectPropsType) {\n    return (\n        <div className={p.project}>\n            <div className={p.projectInfo}>\n                <h3 className={p.projectTitle}>{props.title}</h3>\n                <p className={p.discription}>{props.discription}</p>\n            </div>\n            <div className={p.icon} style={props.style}>\n                <a className={p.button} target='_blank' href={props.href}>View more</a>\n            </div>\n        </div>\n    );\n}","D:\\portfolio\\src\\aboutMe\\AboutMe.tsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":15,"column":12,"nodeType":"73","messageId":"74","endLine":15,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":50,"column":17,"nodeType":"77","endLine":50,"endColumn":55},{"ruleId":"78","severity":1,"message":"79","line":19,"column":17,"nodeType":"77","endLine":19,"endColumn":75},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"@typescript-eslint/no-unused-vars","'send' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation"]